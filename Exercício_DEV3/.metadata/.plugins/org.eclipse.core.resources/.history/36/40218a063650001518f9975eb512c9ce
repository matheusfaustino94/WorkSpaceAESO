package br.aeso.ex01Maurício.exercício.controlador;

import java.util.ArrayList;

import br.aeso.ex01Maurício.exercício.exceptions.projetoException;
import br.aeso.ex01Maurício.exercício.modelo.Endereço;
import br.aeso.ex01Maurício.exercício.modelo.Fornecedor;
import br.aeso.ex01Maurício.exercício.repositorio.IRepositorio;
import br.aeso.ex01Maurício.exercício.repositorio.RepositorioFornecedorJDBC;
import br.aeso.ex01Maurício.exercício.util.ValidarCPF;

public class ControladorFornecedor implements IControlador<Fornecedor> {

	IRepositorio<Fornecedor, String> repositorioFornecedor;
	IControlador<Endereço> controladorEndereco;

	public ControladorFornecedor() {
		repositorioFornecedor = new RepositorioFornecedorJDBC();
		controladorEndereco = new ControladorEndereco();
	}

	public void cadastrarEntities(Fornecedor fornecedor)
			throws projetoException {

		if ((fornecedor != null) && (ValidarCPF.validaCPF(fornecedor.getCpf()))) {
			if (fornecedor.getNome().equals("")) {
				throw new projetoException("Nome inválido!");
			} else {
				repositorioFornecedor.cadastrar(fornecedor);
				fornecedor.getEndereço().setID(fornecedor.getID());
				controladorEndereco.cadastrarEntities(fornecedor.getEndereço());
			}
		} else {
			throw new projetoException("Fornecedor ou CPF inválido!");
		}
	}

	public void atualizarEntities(Fornecedor fornecedor)
			throws projetoException {

		if ((fornecedor != null) && (ValidarCPF.validaCPF(fornecedor.getCpf()))) {
			if (fornecedor.getNome() == "" || fornecedor.getCpf() == "") {
				throw new projetoException("Fornecedor inválido!");
			} else {
				repositorioFornecedor.atualizar(fornecedor);
				controladorEndereco.atualizarEntities(fornecedor.getEndereço());
			}
		} else {
			throw new projetoException("Fornecedor ou CPF inválido!");
		}

	}

	public boolean removerEntities(String cpf) throws projetoException {
		controladorEndereco.removerEntities(cpf);
		return repositorioFornecedor.remover(cpf);
	}

	public Fornecedor procurarEntities(String cpf) throws projetoException {
		return repositorioFornecedor.procurar(cpf);
	}

	public ArrayList<Fornecedor> listarEntities() throws projetoException {
		return repositorioFornecedor.listarEntities();
	}

	/*private Integer procurarID(String cpf) throws projetoException {
		ArrayList<Fornecedor> fornecedores = listarEntities();
		if (fornecedores.isEmpty()) {
			return null;
		} else {
			for (Fornecedor f : fornecedores) {
				if (f.getCpf().equals(cpf)) {
					return f.getID();
				}
			}
		}
		return null;
	}*/
}